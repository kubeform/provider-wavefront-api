/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	alertv1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/alert/v1alpha1"
	cloudv1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/cloud/v1alpha1"
	dashboardv1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/dashboard/v1alpha1"
	derivedv1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/derived/v1alpha1"
	externalv1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/external/v1alpha1"
	ingestionv1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/ingestion/v1alpha1"
	maintenancev1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/maintenance/v1alpha1"
	rolev1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/role/v1alpha1"
	servicev1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/service/v1alpha1"
	userv1alpha1 "kubeform.dev/provider-wavefront-api/client/clientset/versioned/typed/user/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	AlertV1alpha1() alertv1alpha1.AlertV1alpha1Interface
	CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface
	DashboardV1alpha1() dashboardv1alpha1.DashboardV1alpha1Interface
	DerivedV1alpha1() derivedv1alpha1.DerivedV1alpha1Interface
	ExternalV1alpha1() externalv1alpha1.ExternalV1alpha1Interface
	IngestionV1alpha1() ingestionv1alpha1.IngestionV1alpha1Interface
	MaintenanceV1alpha1() maintenancev1alpha1.MaintenanceV1alpha1Interface
	RoleV1alpha1() rolev1alpha1.RoleV1alpha1Interface
	ServiceV1alpha1() servicev1alpha1.ServiceV1alpha1Interface
	UserV1alpha1() userv1alpha1.UserV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	alertV1alpha1       *alertv1alpha1.AlertV1alpha1Client
	cloudV1alpha1       *cloudv1alpha1.CloudV1alpha1Client
	dashboardV1alpha1   *dashboardv1alpha1.DashboardV1alpha1Client
	derivedV1alpha1     *derivedv1alpha1.DerivedV1alpha1Client
	externalV1alpha1    *externalv1alpha1.ExternalV1alpha1Client
	ingestionV1alpha1   *ingestionv1alpha1.IngestionV1alpha1Client
	maintenanceV1alpha1 *maintenancev1alpha1.MaintenanceV1alpha1Client
	roleV1alpha1        *rolev1alpha1.RoleV1alpha1Client
	serviceV1alpha1     *servicev1alpha1.ServiceV1alpha1Client
	userV1alpha1        *userv1alpha1.UserV1alpha1Client
}

// AlertV1alpha1 retrieves the AlertV1alpha1Client
func (c *Clientset) AlertV1alpha1() alertv1alpha1.AlertV1alpha1Interface {
	return c.alertV1alpha1
}

// CloudV1alpha1 retrieves the CloudV1alpha1Client
func (c *Clientset) CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface {
	return c.cloudV1alpha1
}

// DashboardV1alpha1 retrieves the DashboardV1alpha1Client
func (c *Clientset) DashboardV1alpha1() dashboardv1alpha1.DashboardV1alpha1Interface {
	return c.dashboardV1alpha1
}

// DerivedV1alpha1 retrieves the DerivedV1alpha1Client
func (c *Clientset) DerivedV1alpha1() derivedv1alpha1.DerivedV1alpha1Interface {
	return c.derivedV1alpha1
}

// ExternalV1alpha1 retrieves the ExternalV1alpha1Client
func (c *Clientset) ExternalV1alpha1() externalv1alpha1.ExternalV1alpha1Interface {
	return c.externalV1alpha1
}

// IngestionV1alpha1 retrieves the IngestionV1alpha1Client
func (c *Clientset) IngestionV1alpha1() ingestionv1alpha1.IngestionV1alpha1Interface {
	return c.ingestionV1alpha1
}

// MaintenanceV1alpha1 retrieves the MaintenanceV1alpha1Client
func (c *Clientset) MaintenanceV1alpha1() maintenancev1alpha1.MaintenanceV1alpha1Interface {
	return c.maintenanceV1alpha1
}

// RoleV1alpha1 retrieves the RoleV1alpha1Client
func (c *Clientset) RoleV1alpha1() rolev1alpha1.RoleV1alpha1Interface {
	return c.roleV1alpha1
}

// ServiceV1alpha1 retrieves the ServiceV1alpha1Client
func (c *Clientset) ServiceV1alpha1() servicev1alpha1.ServiceV1alpha1Interface {
	return c.serviceV1alpha1
}

// UserV1alpha1 retrieves the UserV1alpha1Client
func (c *Clientset) UserV1alpha1() userv1alpha1.UserV1alpha1Interface {
	return c.userV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.alertV1alpha1, err = alertv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudV1alpha1, err = cloudv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dashboardV1alpha1, err = dashboardv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.derivedV1alpha1, err = derivedv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.externalV1alpha1, err = externalv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ingestionV1alpha1, err = ingestionv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.maintenanceV1alpha1, err = maintenancev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.roleV1alpha1, err = rolev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.serviceV1alpha1, err = servicev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.userV1alpha1, err = userv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.alertV1alpha1 = alertv1alpha1.NewForConfigOrDie(c)
	cs.cloudV1alpha1 = cloudv1alpha1.NewForConfigOrDie(c)
	cs.dashboardV1alpha1 = dashboardv1alpha1.NewForConfigOrDie(c)
	cs.derivedV1alpha1 = derivedv1alpha1.NewForConfigOrDie(c)
	cs.externalV1alpha1 = externalv1alpha1.NewForConfigOrDie(c)
	cs.ingestionV1alpha1 = ingestionv1alpha1.NewForConfigOrDie(c)
	cs.maintenanceV1alpha1 = maintenancev1alpha1.NewForConfigOrDie(c)
	cs.roleV1alpha1 = rolev1alpha1.NewForConfigOrDie(c)
	cs.serviceV1alpha1 = servicev1alpha1.NewForConfigOrDie(c)
	cs.userV1alpha1 = userv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.alertV1alpha1 = alertv1alpha1.New(c)
	cs.cloudV1alpha1 = cloudv1alpha1.New(c)
	cs.dashboardV1alpha1 = dashboardv1alpha1.New(c)
	cs.derivedV1alpha1 = derivedv1alpha1.New(c)
	cs.externalV1alpha1 = externalv1alpha1.New(c)
	cs.ingestionV1alpha1 = ingestionv1alpha1.New(c)
	cs.maintenanceV1alpha1 = maintenancev1alpha1.New(c)
	cs.roleV1alpha1 = rolev1alpha1.New(c)
	cs.serviceV1alpha1 = servicev1alpha1.New(c)
	cs.userV1alpha1 = userv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
