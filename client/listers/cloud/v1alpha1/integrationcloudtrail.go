/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-wavefront-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationCloudtrailLister helps list IntegrationCloudtrails.
// All objects returned here must be treated as read-only.
type IntegrationCloudtrailLister interface {
	// List lists all IntegrationCloudtrails in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationCloudtrail, err error)
	// IntegrationCloudtrails returns an object that can list and get IntegrationCloudtrails.
	IntegrationCloudtrails(namespace string) IntegrationCloudtrailNamespaceLister
	IntegrationCloudtrailListerExpansion
}

// integrationCloudtrailLister implements the IntegrationCloudtrailLister interface.
type integrationCloudtrailLister struct {
	indexer cache.Indexer
}

// NewIntegrationCloudtrailLister returns a new IntegrationCloudtrailLister.
func NewIntegrationCloudtrailLister(indexer cache.Indexer) IntegrationCloudtrailLister {
	return &integrationCloudtrailLister{indexer: indexer}
}

// List lists all IntegrationCloudtrails in the indexer.
func (s *integrationCloudtrailLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationCloudtrail, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationCloudtrail))
	})
	return ret, err
}

// IntegrationCloudtrails returns an object that can list and get IntegrationCloudtrails.
func (s *integrationCloudtrailLister) IntegrationCloudtrails(namespace string) IntegrationCloudtrailNamespaceLister {
	return integrationCloudtrailNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationCloudtrailNamespaceLister helps list and get IntegrationCloudtrails.
// All objects returned here must be treated as read-only.
type IntegrationCloudtrailNamespaceLister interface {
	// List lists all IntegrationCloudtrails in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationCloudtrail, err error)
	// Get retrieves the IntegrationCloudtrail from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationCloudtrail, error)
	IntegrationCloudtrailNamespaceListerExpansion
}

// integrationCloudtrailNamespaceLister implements the IntegrationCloudtrailNamespaceLister
// interface.
type integrationCloudtrailNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationCloudtrails in the indexer for a given namespace.
func (s integrationCloudtrailNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationCloudtrail, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationCloudtrail))
	})
	return ret, err
}

// Get retrieves the IntegrationCloudtrail from the indexer for a given namespace and name.
func (s integrationCloudtrailNamespaceLister) Get(name string) (*v1alpha1.IntegrationCloudtrail, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationcloudtrail"), name)
	}
	return obj.(*v1alpha1.IntegrationCloudtrail), nil
}
