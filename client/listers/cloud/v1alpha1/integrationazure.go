/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-wavefront-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationAzureLister helps list IntegrationAzures.
// All objects returned here must be treated as read-only.
type IntegrationAzureLister interface {
	// List lists all IntegrationAzures in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAzure, err error)
	// IntegrationAzures returns an object that can list and get IntegrationAzures.
	IntegrationAzures(namespace string) IntegrationAzureNamespaceLister
	IntegrationAzureListerExpansion
}

// integrationAzureLister implements the IntegrationAzureLister interface.
type integrationAzureLister struct {
	indexer cache.Indexer
}

// NewIntegrationAzureLister returns a new IntegrationAzureLister.
func NewIntegrationAzureLister(indexer cache.Indexer) IntegrationAzureLister {
	return &integrationAzureLister{indexer: indexer}
}

// List lists all IntegrationAzures in the indexer.
func (s *integrationAzureLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAzure, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAzure))
	})
	return ret, err
}

// IntegrationAzures returns an object that can list and get IntegrationAzures.
func (s *integrationAzureLister) IntegrationAzures(namespace string) IntegrationAzureNamespaceLister {
	return integrationAzureNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationAzureNamespaceLister helps list and get IntegrationAzures.
// All objects returned here must be treated as read-only.
type IntegrationAzureNamespaceLister interface {
	// List lists all IntegrationAzures in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAzure, err error)
	// Get retrieves the IntegrationAzure from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationAzure, error)
	IntegrationAzureNamespaceListerExpansion
}

// integrationAzureNamespaceLister implements the IntegrationAzureNamespaceLister
// interface.
type integrationAzureNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationAzures in the indexer for a given namespace.
func (s integrationAzureNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAzure, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAzure))
	})
	return ret, err
}

// Get retrieves the IntegrationAzure from the indexer for a given namespace and name.
func (s integrationAzureNamespaceLister) Get(name string) (*v1alpha1.IntegrationAzure, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationazure"), name)
	}
	return obj.(*v1alpha1.IntegrationAzure), nil
}
