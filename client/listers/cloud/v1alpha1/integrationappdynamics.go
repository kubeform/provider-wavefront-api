/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-wavefront-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationAppDynamicsLister helps list IntegrationAppDynamicses.
// All objects returned here must be treated as read-only.
type IntegrationAppDynamicsLister interface {
	// List lists all IntegrationAppDynamicses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAppDynamics, err error)
	// IntegrationAppDynamicses returns an object that can list and get IntegrationAppDynamicses.
	IntegrationAppDynamicses(namespace string) IntegrationAppDynamicsNamespaceLister
	IntegrationAppDynamicsListerExpansion
}

// integrationAppDynamicsLister implements the IntegrationAppDynamicsLister interface.
type integrationAppDynamicsLister struct {
	indexer cache.Indexer
}

// NewIntegrationAppDynamicsLister returns a new IntegrationAppDynamicsLister.
func NewIntegrationAppDynamicsLister(indexer cache.Indexer) IntegrationAppDynamicsLister {
	return &integrationAppDynamicsLister{indexer: indexer}
}

// List lists all IntegrationAppDynamicses in the indexer.
func (s *integrationAppDynamicsLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAppDynamics, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAppDynamics))
	})
	return ret, err
}

// IntegrationAppDynamicses returns an object that can list and get IntegrationAppDynamicses.
func (s *integrationAppDynamicsLister) IntegrationAppDynamicses(namespace string) IntegrationAppDynamicsNamespaceLister {
	return integrationAppDynamicsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationAppDynamicsNamespaceLister helps list and get IntegrationAppDynamicses.
// All objects returned here must be treated as read-only.
type IntegrationAppDynamicsNamespaceLister interface {
	// List lists all IntegrationAppDynamicses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAppDynamics, err error)
	// Get retrieves the IntegrationAppDynamics from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationAppDynamics, error)
	IntegrationAppDynamicsNamespaceListerExpansion
}

// integrationAppDynamicsNamespaceLister implements the IntegrationAppDynamicsNamespaceLister
// interface.
type integrationAppDynamicsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationAppDynamicses in the indexer for a given namespace.
func (s integrationAppDynamicsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAppDynamics, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAppDynamics))
	})
	return ret, err
}

// Get retrieves the IntegrationAppDynamics from the indexer for a given namespace and name.
func (s integrationAppDynamicsNamespaceLister) Get(name string) (*v1alpha1.IntegrationAppDynamics, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationappdynamics"), name)
	}
	return obj.(*v1alpha1.IntegrationAppDynamics), nil
}
