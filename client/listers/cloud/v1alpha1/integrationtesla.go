/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-wavefront-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationTeslaLister helps list IntegrationTeslas.
// All objects returned here must be treated as read-only.
type IntegrationTeslaLister interface {
	// List lists all IntegrationTeslas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationTesla, err error)
	// IntegrationTeslas returns an object that can list and get IntegrationTeslas.
	IntegrationTeslas(namespace string) IntegrationTeslaNamespaceLister
	IntegrationTeslaListerExpansion
}

// integrationTeslaLister implements the IntegrationTeslaLister interface.
type integrationTeslaLister struct {
	indexer cache.Indexer
}

// NewIntegrationTeslaLister returns a new IntegrationTeslaLister.
func NewIntegrationTeslaLister(indexer cache.Indexer) IntegrationTeslaLister {
	return &integrationTeslaLister{indexer: indexer}
}

// List lists all IntegrationTeslas in the indexer.
func (s *integrationTeslaLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationTesla, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationTesla))
	})
	return ret, err
}

// IntegrationTeslas returns an object that can list and get IntegrationTeslas.
func (s *integrationTeslaLister) IntegrationTeslas(namespace string) IntegrationTeslaNamespaceLister {
	return integrationTeslaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationTeslaNamespaceLister helps list and get IntegrationTeslas.
// All objects returned here must be treated as read-only.
type IntegrationTeslaNamespaceLister interface {
	// List lists all IntegrationTeslas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationTesla, err error)
	// Get retrieves the IntegrationTesla from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationTesla, error)
	IntegrationTeslaNamespaceListerExpansion
}

// integrationTeslaNamespaceLister implements the IntegrationTeslaNamespaceLister
// interface.
type integrationTeslaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationTeslas in the indexer for a given namespace.
func (s integrationTeslaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationTesla, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationTesla))
	})
	return ret, err
}

// Get retrieves the IntegrationTesla from the indexer for a given namespace and name.
func (s integrationTeslaNamespaceLister) Get(name string) (*v1alpha1.IntegrationTesla, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationtesla"), name)
	}
	return obj.(*v1alpha1.IntegrationTesla), nil
}
