/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-wavefront-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationCloudwatchLister helps list IntegrationCloudwatches.
// All objects returned here must be treated as read-only.
type IntegrationCloudwatchLister interface {
	// List lists all IntegrationCloudwatches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationCloudwatch, err error)
	// IntegrationCloudwatches returns an object that can list and get IntegrationCloudwatches.
	IntegrationCloudwatches(namespace string) IntegrationCloudwatchNamespaceLister
	IntegrationCloudwatchListerExpansion
}

// integrationCloudwatchLister implements the IntegrationCloudwatchLister interface.
type integrationCloudwatchLister struct {
	indexer cache.Indexer
}

// NewIntegrationCloudwatchLister returns a new IntegrationCloudwatchLister.
func NewIntegrationCloudwatchLister(indexer cache.Indexer) IntegrationCloudwatchLister {
	return &integrationCloudwatchLister{indexer: indexer}
}

// List lists all IntegrationCloudwatches in the indexer.
func (s *integrationCloudwatchLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationCloudwatch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationCloudwatch))
	})
	return ret, err
}

// IntegrationCloudwatches returns an object that can list and get IntegrationCloudwatches.
func (s *integrationCloudwatchLister) IntegrationCloudwatches(namespace string) IntegrationCloudwatchNamespaceLister {
	return integrationCloudwatchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationCloudwatchNamespaceLister helps list and get IntegrationCloudwatches.
// All objects returned here must be treated as read-only.
type IntegrationCloudwatchNamespaceLister interface {
	// List lists all IntegrationCloudwatches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationCloudwatch, err error)
	// Get retrieves the IntegrationCloudwatch from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationCloudwatch, error)
	IntegrationCloudwatchNamespaceListerExpansion
}

// integrationCloudwatchNamespaceLister implements the IntegrationCloudwatchNamespaceLister
// interface.
type integrationCloudwatchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationCloudwatches in the indexer for a given namespace.
func (s integrationCloudwatchNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationCloudwatch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationCloudwatch))
	})
	return ret, err
}

// Get retrieves the IntegrationCloudwatch from the indexer for a given namespace and name.
func (s integrationCloudwatchNamespaceLister) Get(name string) (*v1alpha1.IntegrationCloudwatch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationcloudwatch"), name)
	}
	return obj.(*v1alpha1.IntegrationCloudwatch), nil
}
