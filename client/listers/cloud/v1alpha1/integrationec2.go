/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-wavefront-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationEc2Lister helps list IntegrationEc2s.
// All objects returned here must be treated as read-only.
type IntegrationEc2Lister interface {
	// List lists all IntegrationEc2s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationEc2, err error)
	// IntegrationEc2s returns an object that can list and get IntegrationEc2s.
	IntegrationEc2s(namespace string) IntegrationEc2NamespaceLister
	IntegrationEc2ListerExpansion
}

// integrationEc2Lister implements the IntegrationEc2Lister interface.
type integrationEc2Lister struct {
	indexer cache.Indexer
}

// NewIntegrationEc2Lister returns a new IntegrationEc2Lister.
func NewIntegrationEc2Lister(indexer cache.Indexer) IntegrationEc2Lister {
	return &integrationEc2Lister{indexer: indexer}
}

// List lists all IntegrationEc2s in the indexer.
func (s *integrationEc2Lister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationEc2, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationEc2))
	})
	return ret, err
}

// IntegrationEc2s returns an object that can list and get IntegrationEc2s.
func (s *integrationEc2Lister) IntegrationEc2s(namespace string) IntegrationEc2NamespaceLister {
	return integrationEc2NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationEc2NamespaceLister helps list and get IntegrationEc2s.
// All objects returned here must be treated as read-only.
type IntegrationEc2NamespaceLister interface {
	// List lists all IntegrationEc2s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationEc2, err error)
	// Get retrieves the IntegrationEc2 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationEc2, error)
	IntegrationEc2NamespaceListerExpansion
}

// integrationEc2NamespaceLister implements the IntegrationEc2NamespaceLister
// interface.
type integrationEc2NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationEc2s in the indexer for a given namespace.
func (s integrationEc2NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationEc2, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationEc2))
	})
	return ret, err
}

// Get retrieves the IntegrationEc2 from the indexer for a given namespace and name.
func (s integrationEc2NamespaceLister) Get(name string) (*v1alpha1.IntegrationEc2, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationec2"), name)
	}
	return obj.(*v1alpha1.IntegrationEc2), nil
}
