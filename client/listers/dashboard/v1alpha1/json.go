/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-wavefront-api/apis/dashboard/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JsonLister helps list Jsons.
// All objects returned here must be treated as read-only.
type JsonLister interface {
	// List lists all Jsons in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Json, err error)
	// Jsons returns an object that can list and get Jsons.
	Jsons(namespace string) JsonNamespaceLister
	JsonListerExpansion
}

// jsonLister implements the JsonLister interface.
type jsonLister struct {
	indexer cache.Indexer
}

// NewJsonLister returns a new JsonLister.
func NewJsonLister(indexer cache.Indexer) JsonLister {
	return &jsonLister{indexer: indexer}
}

// List lists all Jsons in the indexer.
func (s *jsonLister) List(selector labels.Selector) (ret []*v1alpha1.Json, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Json))
	})
	return ret, err
}

// Jsons returns an object that can list and get Jsons.
func (s *jsonLister) Jsons(namespace string) JsonNamespaceLister {
	return jsonNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JsonNamespaceLister helps list and get Jsons.
// All objects returned here must be treated as read-only.
type JsonNamespaceLister interface {
	// List lists all Jsons in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Json, err error)
	// Get retrieves the Json from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Json, error)
	JsonNamespaceListerExpansion
}

// jsonNamespaceLister implements the JsonNamespaceLister
// interface.
type jsonNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Jsons in the indexer for a given namespace.
func (s jsonNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Json, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Json))
	})
	return ret, err
}

// Get retrieves the Json from the indexer for a given namespace and name.
func (s jsonNamespaceLister) Get(name string) (*v1alpha1.Json, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("json"), name)
	}
	return obj.(*v1alpha1.Json), nil
}
